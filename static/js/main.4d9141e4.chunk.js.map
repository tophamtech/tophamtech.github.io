{"version":3,"sources":["logo.svg","components/card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","minWidth","maxWidth","height","margin","position","title","fontSize","pos","padding","moreBtn","bottom","SimpleCard","props","classes","bullet","Card","className","CardContent","Typography","variant","component","color","type","details","CardActions","Button","size","href","linkSrc","more","theme","flexGrow","App","backgroundColor","Grid","container","spacing","alignItems","justify","item","sm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,4KCQrCC,EAAYC,YAAW,CAC3BC,KAAM,CACFC,SAAS,IACXC,SAAU,IACVC,OAAO,IACPC,OAAQ,SACRC,SAAU,YAEZC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHJ,OAAQ,GACRK,QAAQ,IAEVC,QAAS,CACLL,SAAU,WACVM,OAAQ,KAIC,SAASC,EAAWC,GACjC,IAAMC,EAAUhB,IACcgB,EAAQC,OAEtC,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAWH,EAAQd,MACvB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChCR,EAAMP,OAET,kBAACa,EAAA,EAAD,CAAYF,UAAWH,EAAQN,IAAKc,MAAM,iBACvCT,EAAMU,MAET,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACnCR,EAAMW,UAGX,kBAACC,EAAA,EAAD,CAAaR,UAAWH,EAAQJ,SAC9B,kBAACgB,EAAA,EAAD,CAAQC,KAAK,QACbC,KAAMf,EAAMgB,SAAUhB,EAAMiB,QCxCpC,IAAMhC,EAAYC,aAAW,SAAAgC,GAAK,MAAK,CACrC/B,KAAM,CACJgC,SAAU,EACVvB,QAAS,QA6DEwB,MAzDf,WACE,IAAMnB,EAAUhB,IAChB,OACE,yBACEmB,UAAU,MACViB,gBAAgB,SAFlB,sBAIE,kBAACC,EAAA,EAAD,CACElB,UAAWH,EAAQd,KACnBoC,WAAS,EAACC,QAAS,EACnBC,WAAW,SACXC,QAAQ,UACR,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC7B,EAAD,CACEN,MAAM,cACNiB,KAAK,2BACLC,QAAQ,8EACRM,KAAK,uBACLD,QAAQ,8CAEZ,kBAACM,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC7B,EAAD,CACEN,MAAM,aACNiB,KAAK,0BACLC,QAAQ,sGACRM,KAAK,uBACLD,QAAQ,+CAEZ,kBAACM,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC7B,EAAD,CACEN,MAAM,aACNiB,KAAK,kCACLC,QAAQ,sHACRM,KAAK,uBACLD,QAAQ,6CAEZ,kBAACM,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC7B,EAAD,CACEN,MAAM,cACNiB,KAAK,cACLC,QAAQ,iFACRM,KAAK,uBACLD,QAAQ,+CAEZ,kBAACM,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAAC7B,EAAD,CACEN,MAAM,4BACNiB,KAAK,cACLC,QAAQ,wIACRM,KAAK,uBACLD,QAAQ,iDCrDAa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d9141e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n      minWidth:200,\r\n    maxWidth: 500,\r\n    height:300,\r\n    margin: '0 auto',\r\n    position: 'relative'\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    margin: 10,\r\n    padding:10\r\n  },\r\n  moreBtn: {\r\n      position: 'absolute',\r\n      bottom: 0\r\n  }\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>â€¢</span>;\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.title}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {props.type}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.details}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions className={classes.moreBtn}>\r\n        <Button size=\"small\"\r\n        href={props.linkSrc}>{props.more}</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SimpleCard from \"./components/card\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: 40,\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div \n      className=\"App\"\n      backgroundColor='linen'>\n      TophamTech Projects\n      <Grid \n        className={classes.root} \n        container spacing={3}\n        alignItems=\"center\"\n        justify=\"center\">\n        <Grid item sm={6}>\n          <SimpleCard \n            title='Table Snake'\n            type='Arduino and Android Code'\n            details='Bluetooth controlled LED table built from scratch with a step by step guide'\n            more='View the Source Code'\n            linkSrc='https://github.com/tophamtech/TableSnake'></SimpleCard>\n        </Grid>\n        <Grid item sm={6}>\n          <SimpleCard \n            title='Tap Tracks'\n            type='Android and NodeJS Code'\n            details='NFC app for Android for tracking chores. Supported with a NodeJS/Express API and backend by MongoDB'\n            more='View the Source Code'\n            linkSrc='https://github.com/tophamtech/tapTrackApp'></SimpleCard>\n        </Grid>\n        <Grid item sm={6}>\n          <SimpleCard \n            title='Meal Maker'\n            type='Google DialogueFlow NodeJS Code'\n            details='Proof of concept finding a recipe based around a single ingredient and a guide of how to create a Google Home Skill'\n            more='View the Source Code'\n            linkSrc='https://github.com/tophamtech/mealMaker'></SimpleCard>\n        </Grid>\n        <Grid item sm={6}>\n          <SimpleCard \n            title='Nixie Clock'\n            type='Python Code'\n            details='Fully custom PCB and accompanying python code for fetching train and bus times'\n            more='View the Source Code'\n            linkSrc='https://github.com/tophamtech/nixieClock/'></SimpleCard>\n        </Grid>\n        <Grid item sm={6}>\n          <SimpleCard \n            title='Internet Speed Monitoring'\n            type='Python Code'\n            details='Step by step guide and custom utility for analysing internet upload and download speed from any Linux machine(e.g. Pi) on the network'\n            more='View the Source Code'\n            linkSrc='https://github.com/tophamtech/TableSnake'></SimpleCard>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}